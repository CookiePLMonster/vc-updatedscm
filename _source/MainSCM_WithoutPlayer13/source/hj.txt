:HJ
set_wb_check_to 0
thread 'HJ'

:HJ_21
wait 0
if
   not Player.Defined($PLAYER_CHAR)
jf @HJ_48
jump @HJ_21

:HJ_48
if
0445:   are_car_cheats_used
jf @HJ_68
jump @HJ_21

:HJ_68
if
04C9:   player $PLAYER_CHAR driving_plane
jf @HJ_91
jump @HJ_21

:HJ_91
if
04A8:   player $PLAYER_CHAR driving_boat
jf @HJ_114
jump @HJ_21

:HJ_114
if
00E0:   player $PLAYER_CHAR driving
jf @HJ_1591
03C1: $727 = player $PLAYER_CHAR car_no_save
04FC: store_stunt_data $PLAYER_CHAR two_wheels: $768 $772 wheelie: $775 $779 stoppie: $782 $786
if
  $768 > 0 // integer values
jf @HJ_355
$768 /= 1000 // integer values
008C: $769 = float_to_integer $772
008D: $773 = integer_to_float $769
0086: $763 = $772 // floating-point values only
0061: $763 -= $773 // floating-point values
$763 *= 100.0 // floating-point values
008C: $770 = float_to_integer $763
0084: $726 = $768 // integer values and handles
0058: $726 += $769 // integer values
$726 /= 2 // integer values
Player.Money($PLAYER_CHAR) += $726
if
0424:   metric
jf @HJ_315
0302: text_4numbers 'WHEEL01' $726 $769 $770 $768 3000 ms 1  // TWO WHEELS DOUBLE BONUS: $ ~1~ Distance: ~1~.~1~m Time: ~1~ seconds
jump @HJ_355

:HJ_315
0425: meters $774 to_feet $772
008C: $771 = float_to_integer $774
02FF: show_text_3numbers GXT 'WHEEL02' numbers $726 $771 $768 time 3000 flag 1  // TWO WHEELS DOUBLE BONUS: $ ~1~ Distance: ~1~ feet Time: ~1~ seconds

:HJ_355
if
  $775 > 0 // integer values
jf @HJ_563
$775 /= 1000 // integer values
008C: $776 = float_to_integer $779
008D: $780 = integer_to_float $776
0086: $763 = $779 // floating-point values only
0061: $763 -= $780 // floating-point values
$763 *= 100.0 // floating-point values
008C: $777 = float_to_integer $763
0084: $726 = $775 // integer values and handles
0058: $726 += $776 // integer values
$726 *= 2 // integer values
$726 /= 5 // integer values
$726 /= 2 // integer values
Player.Money($PLAYER_CHAR) += $726
if
0424:   metric
jf @HJ_523
0302: text_4numbers 'WHEEL06' $726 $776 $777 $775 3000 ms 1  // WHEELIE BONUS: $ ~1~ Distance: ~1~.~1~m Time: ~1~ seconds
jump @HJ_563

:HJ_523
0425: meters $781 to_feet $779
008C: $778 = float_to_integer $781
02FF: show_text_3numbers GXT 'WHEEL07' numbers $726 $778 $775 time 3000 flag 1  // WHEELIE BONUS: $ ~1~ Distance: ~1~ feet Time: ~1~ seconds

:HJ_563
if
  $782 > 0 // integer values
jf @HJ_757
$782 /= 1000 // integer values
008C: $783 = float_to_integer $786
008D: $787 = integer_to_float $783
0086: $763 = $786 // floating-point values only
0061: $763 -= $787 // floating-point values
$763 *= 100.0 // floating-point values
008C: $784 = float_to_integer $763
0084: $726 = $782 // integer values and handles
0058: $726 += $783 // integer values
$726 /= 2 // integer values
Player.Money($PLAYER_CHAR) += $726
if
0424:   metric
jf @HJ_717
0302: text_4numbers 'WHEEL11' $726 $783 $784 $782 3000 ms 1  // STOPPIE BONUS: $ ~1~ Distance: ~1~.~1~m Time: ~1~ seconds
jump @HJ_757

:HJ_717
0425: meters $788 to_feet $786
008C: $785 = float_to_integer $788
02FF: show_text_3numbers GXT 'WHEEL12' numbers $726 $785 $782 time 3000 flag 1  // STOPPIE BONUS: $ ~1~ Distance: ~1~ feet Time: ~1~ seconds

:HJ_757
if
01F3:   car $727 airborne
jf @HJ_1577
$739 = 0 // integer values
$762 = 0.0 // floating-point values
$730 = 0 // integer values
$737 = 0 // integer values
$733 = 0 // integer values
$732 = 0 // integer values
$738 = 0 // integer values
$731 = 0 // integer values
$728 = 0 // integer values
$729 = 0 // integer values
$749 = -100.0 // floating-point values
$750 = 0.0 // floating-point values
$751 = 0.0 // floating-point values
$752 = 0.0 // floating-point values
$753 = 0.0 // floating-point values
$754 = 0.0 // floating-point values
$755 = 0.0 // floating-point values
$756 = 0.0 // floating-point values
$757 = 0.0 // floating-point values
$758 = 0.0 // floating-point values
$759 = 0.0 // floating-point values
$760 = 0.0 // floating-point values
$761 = 0.0 // floating-point values
$736 = 0 // integer values
$735 = 0 // integer values
$734 = 0 // integer values
$763 = 0.0 // floating-point values
$765 = 0.0 // floating-point values
$767 = 0.0 // floating-point values
$766 = 0.0 // floating-point values
$764 = 0.0 // floating-point values
$741 = 0 // integer values
$742 = 0 // integer values
$743 = 0 // integer values
$744 = 0 // integer values
$745 = 0 // integer values
$746 = 0 // integer values

:HJ_1089
if or
01F3:   car $727 airborne
  10 > $746 // integer values
jf @HJ_1570
$746 += 1 // integer values
Car.StorePos($727, $750, $751, $752)
0086: $764 = $762 // floating-point values only
if
  $728 == 0 // integer values
jf @HJ_1198
$764 = Car.Angle($727)
0086: $753 = $750 // floating-point values only
0086: $754 = $751 // floating-point values only
0086: $755 = $752 // floating-point values only
$728 = 1 // integer values

:HJ_1198
wait 0
if
   Car.Wrecked($727)
jf @HJ_1225
jump @HJ_21

:HJ_1225
if
   not Player.Defined($PLAYER_CHAR)
jf @HJ_1248
jump @HJ_21

:HJ_1248
if
80E0:   not player $PLAYER_CHAR driving
jf @HJ_1271
jump @HJ_21

:HJ_1271
if and
820D:   not car $727 flipped
  $732 == 0 // integer values
jf @HJ_1301
$732 = 1 // integer values

:HJ_1301
if and
020D:   car $727 flipped
  $732 == 1 // integer values
jf @HJ_1338
$733 += 1 // integer values
$732 = 0 // integer values

:HJ_1338
$762 = Car.Angle($727)
0086: $765 = $762 // floating-point values only
0061: $765 -= $764 // floating-point values
if
  $765 > 180.0 // floating-point values
jf @HJ_1416
0086: $766 = $765 // floating-point values only
$765 = 360.0 // floating-point values
0061: $765 -= $766 // floating-point values
jump @HJ_1463

:HJ_1416
if
  -180.0 > $765 // floating-point values
jf @HJ_1463
0086: $766 = $765 // floating-point values only
$765 = 360.0 // floating-point values
0059: $765 += $766 // floating-point values

:HJ_1463
if
  0.0 > $765 // floating-point values
jf @HJ_1510
0086: $766 = $765 // floating-point values only
$765 = 0.0 // floating-point values
0061: $765 -= $766 // floating-point values

:HJ_1510
0059: $767 += $765 // floating-point values
008C: $739 = float_to_integer $767
if
0024:   $752 > $749 // floating-point values only
jf @HJ_1553
0086: $749 = $752 // floating-point values only

:HJ_1553
$752 = 0.0 // floating-point values
jump @HJ_1089

:HJ_1570
jump @HJ_1584

:HJ_1577
jump @HJ_21

:HJ_1584
jump @HJ_1598

:HJ_1591
jump @HJ_21

:HJ_1598
if
  $728 == 1 // integer values
jf @HJ_1837
Car.StorePos($727, $756, $757, $763)
$737 = 0 // integer values
0086: $758 = $753 // floating-point values only
0061: $758 -= $756 // floating-point values
0086: $759 = $754 // floating-point values only
0061: $759 -= $757 // floating-point values
0069: $758 *= $758 // floating-point values
0069: $759 *= $759 // floating-point values
0086: $760 = $758 // floating-point values only
0059: $760 += $759 // floating-point values
01FB: $761 = square_root $760
030E: save_jump_distance $761
008C: $736 = float_to_integer $761
0061: $749 -= $755 // floating-point values
030F: save_jump_height $749
008C: $729 = float_to_integer $749
008D: $763 = integer_to_float $736
0061: $761 -= $763 // floating-point values
0086: $763 = $761 // floating-point values only
$763 *= 100.0 // floating-point values
008C: $735 = float_to_integer $763
008D: $763 = integer_to_float $729
0061: $749 -= $763 // floating-point values
0086: $763 = $749 // floating-point values only
$763 *= 100.0 // floating-point values
008C: $734 = float_to_integer $763
0310: save_jump_flips $733
0311: save_jump_rotation $739

:HJ_1837
if
  $729 > 4 // floating-point values
jf @HJ_1865
$731 += 1 // integer values

:HJ_1865
if
  $736 > 40 // integer values
jf @HJ_1890
$731 += 1 // integer values

:HJ_1890
if
  $733 > 1 // integer values
jf @HJ_1915
$731 += 1 // integer values

:HJ_1915
if
  $739 > 360 // integer values
jf @HJ_1941
$731 += 1 // integer values

:HJ_1941
if
  $738 > 60 // integer values
jf @HJ_1966
$730 = 1 // integer values

:HJ_1966
if
  $731 > 0 // integer values
jf @HJ_2475
0084: $747 = $733 // integer values and handles
$747 *= 180 // integer values
0058: $747 += $739 // integer values
0084: $748 = $736 // integer values and handles
$748 *= 6 // integer values
0058: $747 += $748 // integer values
0084: $748 = $729 // integer values and handles
$748 *= 45 // integer values
0058: $747 += $748 // integer values
if
  $730 == 1 // integer values
jf @HJ_2079
$747 *= 2 // integer values

:HJ_2079
0068: $747 *= $731 // integer values
$747 /= 3 // integer values
$747 /= 5 // integer values
Player.Money($PLAYER_CHAR) += $747
if
  $731 == 1 // integer values
jf @HJ_2149
01E4: text_1number_lowpriority 'HJ_IS' $747 2000 ms 1  // INSANE STUNT BONUS: $~1~
0312: save_jump_type 1

:HJ_2149
if
  $731 == 2 // integer values
jf @HJ_2189
01E4: text_1number_lowpriority 'HJ_DIS' $747 2000 ms 1  // DOUBLE INSANE STUNT BONUS: $~1~
0312: save_jump_type 3

:HJ_2189
if
  $731 == 3 // integer values
jf @HJ_2229
01E4: text_1number_lowpriority 'HJ_TIS' $747 2000 ms 1  // TRIPLE INSANE STUNT BONUS: $~1~
0312: save_jump_type 5

:HJ_2229
if
  $731 == 4 // integer values
jf @HJ_2269
01E4: text_1number_lowpriority 'HJ_QIS' $747 2000 ms 1  // QUADRUPLE INSANE STUNT BONUS: $~1~
0312: save_jump_type 7

:HJ_2269
if
0424:   metric
jf @HJ_2380
if
  $730 == 1 // integer values
jf @HJ_2340
0308: text_6numbers 'HJSTATW' $736 $735 $729 $734 $733 $739 time 5000 flag 5  // Distance: ~1~.~1~m Height: ~1~.~1~m Flips: ~1~ Rotation: ~1~_ And what a great landing!
jump @HJ_2373

:HJ_2340
0308: text_6numbers 'HJSTAT' $736 $735 $729 $734 $733 $739 time 5000 flag 5  // Distance: ~1~.~1~m Height: ~1~.~1~m Flips: ~1~ Rotation: ~1~_

:HJ_2373
jump @HJ_2475

:HJ_2380
042D: $736 = metric_to_imperial $736
042D: $729 = metric_to_imperial $729
if
  $730 == 1 // integer values
jf @HJ_2448
0302: text_4numbers 'HJSTAWF' $736 $729 $733 $739 5000 ms 5  // Distance: ~1~ft Height: ~1~ft Flips: ~1~ Rotation: ~1~_ And what a great landing!
jump @HJ_2475

:HJ_2448
0302: text_4numbers 'HJSTATF' $736 $729 $733 $739 5000 ms 5  // Distance: ~1~ft Height: ~1~ft Flips: ~1~ Rotation: ~1~_

:HJ_2475
jump @HJ_21
