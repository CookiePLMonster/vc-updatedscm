:RCPLNE1
thread 'RCPLNE1'
gosub @RCPLNE1_46
if
wasted_or_busted
jf @RCPLNE1_37
gosub @RCPLNE1_6348

:RCPLNE1_37
gosub @RCPLNE1_6567
end_thread

:RCPLNE1_46
$ONMISSION = 1 // integer values
$1084 = 1 // integer values
if
  $8485 == 0 // integer values
jf @RCPLNE1_80
increment_mission_attempts

:RCPLNE1_80
wait 0
054C: use_GXT_table 'RCPLNE1'
Model.Load(#RCBARON)

:RCPLNE1_99
if
   not Model.Available(#RCBARON)
jf @RCPLNE1_126
wait 0
jump @RCPLNE1_99

:RCPLNE1_126
$8481 = 28 // integer values
$8486 = 313.0 // floating-point values
$8487 = 1238.332 // floating-point values
$8488 = 27.546 // floating-point values
$8489 = 317.926 // floating-point values
$8490 = 1219.877 // floating-point values
$8491 = 26.554 // floating-point values
$8492 = 321.35 // floating-point values
$8493 = 1102.111 // floating-point values
$8494 = 31.448 // floating-point values
$8495 = 317.778 // floating-point values
$8496 = 949.34 // floating-point values
$8497 = 29.25 // floating-point values
$8498 = 289.354 // floating-point values
$8499 = 789.471 // floating-point values
$8500 = 27.426 // floating-point values
$8501 = 201.599 // floating-point values
$8502 = 689.725 // floating-point values
$8503 = 27.896 // floating-point values
$8504 = 378.602 // floating-point values
$8505 = 564.227 // floating-point values
$8506 = 20.846 // floating-point values
$8507 = 346.553 // floating-point values
$8508 = 445.865 // floating-point values
$8509 = 19.168 // floating-point values
$8510 = 331.891 // floating-point values
$8511 = 344.459 // floating-point values
$8512 = 18.385 // floating-point values
$8513 = 337.064 // floating-point values
$8514 = 243.41 // floating-point values
$8515 = 24.428 // floating-point values
$8516 = 407.542 // floating-point values
$8517 = 102.447 // floating-point values
$8518 = 24.134 // floating-point values
$8519 = 332.597 // floating-point values
$8520 = -12.219 // floating-point values
$8521 = 25.134 // floating-point values
$8522 = 284.866 // floating-point values
$8523 = -144.529 // floating-point values
$8524 = 22.046 // floating-point values
$8525 = 225.013 // floating-point values
$8526 = -271.518 // floating-point values
$8527 = 19.929 // floating-point values
$8528 = 194.309 // floating-point values
$8529 = -365.009 // floating-point values
$8530 = 19.146 // floating-point values
$8531 = 179.89 // floating-point values
$8532 = -500.032 // floating-point values
$8533 = 17.304 // floating-point values
$8534 = 171.669 // floating-point values
$8535 = -638.857 // floating-point values
$8536 = 17.328 // floating-point values
$8537 = 149.798 // floating-point values
$8538 = -738.283 // floating-point values
$8539 = 16.001 // floating-point values
$8540 = 95.276 // floating-point values
$8541 = -838.345 // floating-point values
$8542 = 15.527 // floating-point values
$8543 = -22.699 // floating-point values
$8544 = -869.548 // floating-point values
$8545 = 16.142 // floating-point values
$8546 = -107.153 // floating-point values
$8547 = -895.34 // floating-point values
$8548 = 18.43 // floating-point values
$8549 = -190.477 // floating-point values
$8550 = -944.935 // floating-point values
$8551 = 20.094 // floating-point values
$8552 = -186.305 // floating-point values
$8553 = -1075.039 // floating-point values
$8554 = 32.099 // floating-point values
$8555 = -193.016 // floating-point values
$8556 = -1232.925 // floating-point values
$8557 = 16.655 // floating-point values
$8558 = -164.456 // floating-point values
$8559 = -1402.917 // floating-point values
$8560 = 16.294 // floating-point values
$8561 = -115.326 // floating-point values
$8562 = -1512.663 // floating-point values
$8563 = 15.455 // floating-point values
$8564 = -11.818 // floating-point values
$8565 = -1576.647 // floating-point values
$8566 = 15.96 // floating-point values
$8567 = 110.56 // floating-point values
$8568 = -1588.121 // floating-point values
$8569 = 16.516 // floating-point values
$8570 = 174.464 // floating-point values
$8571 = -1527.732 // floating-point values
$8572 = 20.699 // floating-point values
$8573 = 259.539 // floating-point values
$8574 = -1234.819 // floating-point values
$8575 = 32.351 // floating-point values
$8419 = 316.0 // floating-point values
$8420 = 1238.332 // floating-point values
$8421 = 26.554 // floating-point values
$8422 = 319.0 // floating-point values
$8423 = 1238.332 // floating-point values
$8424 = 26.554 // floating-point values
$8425 = 322.0 // floating-point values
$8426 = 1238.332 // floating-point values
$8427 = 26.554 // floating-point values
$8404 = 182.29 // floating-point values
$8472 = 0 // integer values
$8468 = 0 // integer values
$8469 = 0 // integer values
$8470 = 0 // integer values
$8471 = 0 // integer values
$8408 = 4.0 // floating-point values
$8409 = 4.0 // floating-point values
$8410 = 4.0 // floating-point values
01F7: set_player $PLAYER_CHAR ignored_by_cops_state_to 1
00DA: $8458 = player $PLAYER_CHAR car
if
   not Car.Wrecked($8458)
jf @RCPLNE1_1236
020A: set_car $8458 door_status_to 2

:RCPLNE1_1236
$8576 = Player.WantedLevel($PLAYER_CHAR)
Player.ClearWantedLevel($PLAYER_CHAR)
0395: clear_area 1 at $8486 $8487 range $8488 80.0
02A3: enable_widescreen 1
$8459 = Car.Create(#RCBARON, $8419, $8420, $8421)
03AB: set_car $8459 strong 1
03ED: set_car $8459 not_damaged_when_upside_down 1
Car.Angle($8459) = $8404
Car.ImmuneToNonPlayer($8459) = True
$8460 = Car.Create(#RCBARON, $8422, $8423, $8424)
03AB: set_car $8460 strong 1
03ED: set_car $8460 not_damaged_when_upside_down 1
Car.Angle($8460) = $8404
Car.ImmuneToNonPlayer($8460) = True
$8461 = Car.Create(#RCBARON, $8425, $8426, $8427)
03AB: set_car $8461 strong 1
03ED: set_car $8461 not_damaged_when_upside_down 1
Car.Angle($8461) = $8404
Car.ImmuneToNonPlayer($8461) = True
046E: put_player $PLAYER_CHAR in_RC_mode_at $8486 $8487 $8488 angle 182.29 RC_model #RCBARON
$8464 = Player.RC_car($PLAYER_CHAR)
04D6: enable_rc_car_detonation 0
Camera.SetPosition(323.6173, 1239.22, 26.80053, 0.0, 0.0, 0.0)
Camera.PointAt(322.7087, 1238.807, 26.85948, 2)
fade 1 3000

:RCPLNE1_1501
if
fading
jf @RCPLNE1_1525
wait 0
jump @RCPLNE1_1501

:RCPLNE1_1525
16@ = 0 // integer values

:RCPLNE1_1532
if
  5000 > 16@ // integer values
jf @RCPLNE1_1601
wait 0
00BC: text_highpriority 'RCPL1_4' 5000 ms 2  // ~g~Compete in a CHECKPOINT RACE with 3 other RC Plane's
if
00E1:   player 0 pressed_button 16
jf @RCPLNE1_1594
jump @RCPLNE1_1907

:RCPLNE1_1594
jump @RCPLNE1_1532

:RCPLNE1_1601
16@ = 0 // integer values
Camera.SetAtPos(289.354, 789.471, 27.426)
Camera.SetPosition(307.078, 842.687, 33.651, 0.0, 0.0, 0.0)
Camera.PointAt(289.354, 789.471, 27.426, 2)

:RCPLNE1_1676
if
  5000 > 16@ // integer values
jf @RCPLNE1_1780
wait 0
00BC: text_highpriority 'RCPL1_5' 5000 ms 2  // ~g~Fly through the checkpoints scattered throughout Vice City.
04D5: create_corona_at 289.354 789.471 27.426 radius 7.0 type 6 flare 0 RGB 255 137 205
if
00E1:   player 0 pressed_button 16
jf @RCPLNE1_1773
jump @RCPLNE1_1907

:RCPLNE1_1773
jump @RCPLNE1_1676

:RCPLNE1_1780
16@ = 0 // integer values

:RCPLNE1_1787
if
  5000 > 16@ // integer values
jf @RCPLNE1_1907
wait 0
Camera.SetPosition(311.3789, 1236.672, 26.99365, 0.0, 0.0, 0.0)
Camera.PointAt(312.2311, 1237.193, 26.93967, 2)
00BC: text_highpriority 'RCPL1_6' 5000 ms 2  // ~g~If you wish to quit this mission press the ~h~~k~~PED_FIREWEAPON~ ~g~button to detonate your RC Plane.
if
00E1:   player 0 pressed_button 16
jf @RCPLNE1_1900
jump @RCPLNE1_1907

:RCPLNE1_1900
jump @RCPLNE1_1787

:RCPLNE1_1907
if
   not Car.Wrecked($8464)
jf @RCPLNE1_1951
03EB: clear_small_messages_only
Camera.OnVehicle($8464, 18, 2)
wait 0
032A: set_behind_camera_mode_to 0
wait 300
02A3: enable_widescreen 0

:RCPLNE1_1951
0084: $8482 = $8481 // integer values and handles
$8482 -= 1 // integer values
Player.CanMove($PLAYER_CHAR) = False
03BF: set_player $PLAYER_CHAR ignored_by_everyone_to 1
03F4: set_all_vehicles_apply_damage_rules 0
00BA: text_styled 'RACE2' 1100 ms 4  // ~g~3
018C: play_sound 7 at 0.0 0.0 0.0
wait 1000
00BA: text_styled 'RACE3' 1100 ms 4  // ~g~2
018C: play_sound 8 at 0.0 0.0 0.0
wait 1000
00BA: text_styled 'RACE4' 1100 ms 4  // ~g~1
018C: play_sound 9 at 0.0 0.0 0.0
wait 1000
00BA: text_styled 'RACE5' 800 ms 4  // ~g~GO!
018C: play_sound 10 at 0.0 0.0 0.0
Player.CanMove($PLAYER_CHAR) = True
03BF: set_player $PLAYER_CHAR ignored_by_everyone_to 0
03F4: set_all_vehicles_apply_damage_rules 1
0293: $18 = get_controller_mode
if
  $18 == 3 // integer values
jf @RCPLNE1_2193
03E5: text_box 'PLANE_4'  // Use the ~h~~k~~VEHICLE_ACCELERATE~~w~ button to accelerate, Left and right to turn.
jump @RCPLNE1_2203

:RCPLNE1_2193
03E5: text_box 'PLANE_H'  // Use the ~h~~k~~VEHICLE_ACCELERATE~~w~ button to accelerate, Left and right to turn.

:RCPLNE1_2203
if
   Car.Wrecked($8459)
jf @RCPLNE1_2226
jump @RCPLNE1_6348

:RCPLNE1_2226
if
   Car.Wrecked($8460)
jf @RCPLNE1_2249
jump @RCPLNE1_6348

:RCPLNE1_2249
if
   Car.Wrecked($8461)
jf @RCPLNE1_2272
jump @RCPLNE1_6348

:RCPLNE1_2272
if
   not Car.Wrecked($8459)
jf @RCPLNE1_2300
Marker.TieToCar($8455, $8459, 0, 1)

:RCPLNE1_2300
if
   not Car.Wrecked($8460)
jf @RCPLNE1_2328
Marker.TieToCar($8456, $8460, 0, 1)

:RCPLNE1_2328
if
   not Car.Wrecked($8461)
jf @RCPLNE1_2356
Marker.TieToCar($8457, $8461, 0, 1)

:RCPLNE1_2356
gosub @RCPLNE1_4129
0086: $8431 = $8446 // floating-point values only
0086: $8432 = $8447 // floating-point values only
0086: $8433 = $8448 // floating-point values only
0086: $8434 = $8449 // floating-point values only
0086: $8435 = $8450 // floating-point values only
0086: $8436 = $8451 // floating-point values only
0086: $8437 = $8446 // floating-point values only
0086: $8438 = $8447 // floating-point values only
0086: $8439 = $8448 // floating-point values only
0086: $8440 = $8446 // floating-point values only
0086: $8441 = $8447 // floating-point values only
0086: $8442 = $8448 // floating-point values only
0086: $8443 = $8446 // floating-point values only
0086: $8444 = $8447 // floating-point values only
0086: $8445 = $8448 // floating-point values only
018A: $8453 = create_checkpoint_at $8431 $8432 $8433
0167: $8454 = create_marker_at $8434 $8435 $8436 color 5 flag 2
0168: set_blip $8454 size 2
0166: set_marker $8454 brightness_to 1
04D2: set_plane $8459 fly_autopilot_around_point $8437 $8438 $8439 30
04D2: set_plane $8460 fly_autopilot_around_point $8440 $8441 $8442 25
04D2: set_plane $8461 fly_autopilot_around_point $8443 $8444 $8445 35
$8474 = 0 // integer values
03C3: set_timer_with_text_to $8474 type 0 text 'RCH1_5'  // Time:
if
   Car.Wrecked($8464)
jf @RCPLNE1_2622
jump @RCPLNE1_6348

:RCPLNE1_2622
if
001C:   $8481 > $8468 // integer values
jf @RCPLNE1_4122
wait 0
0395: clear_area 0 at -447.8 1442.95 range 10.0 120.0
$8473 = 0 // integer values
if
   not Car.Wrecked($8464)
jf @RCPLNE1_2924
if
01AF:   car $8464 0 $8431 $8432 $8433 radius 7.5 7.5 7.5
jf @RCPLNE1_2924
$8468 += 1 // integer values
Marker.Disable($8453)
018C: play_sound 1 at 0.0 0.0 0.0
Marker.Disable($8454)
0084: $8472 = $8468 // integer values and handles
gosub @RCPLNE1_4129
0086: $8431 = $8446 // floating-point values only
0086: $8432 = $8447 // floating-point values only
0086: $8433 = $8448 // floating-point values only
0086: $8434 = $8449 // floating-point values only
0086: $8435 = $8450 // floating-point values only
0086: $8436 = $8451 // floating-point values only
if
003A:   $8468 == $8481 // integer values and handles
jf @RCPLNE1_2859
jump @RCPLNE1_6373

:RCPLNE1_2859
018A: $8453 = create_checkpoint_at $8431 $8432 $8433
if
803A:   not  $8468 == $8482 // integer values and handles
jf @RCPLNE1_2924
0167: $8454 = create_marker_at $8434 $8435 $8436 color 5 flag 2
0166: set_marker $8454 brightness_to 1
0168: set_blip $8454 size 2

:RCPLNE1_2924
if
   not Car.Wrecked($8459)
jf @RCPLNE1_3182
0084: $8463 = $8459 // integer values and handles
0084: $8472 = $8469 // integer values and handles
0086: $8428 = $8419 // floating-point values only
0086: $8429 = $8420 // floating-point values only
0086: $8430 = $8421 // floating-point values only
0084: $8479 = $8475 // integer values and handles
gosub @RCPLNE1_6045
0086: $8419 = $8428 // floating-point values only
0086: $8420 = $8429 // floating-point values only
0086: $8421 = $8430 // floating-point values only
0084: $8475 = $8479 // integer values and handles
if
   not Car.Wrecked($8459)
jf @RCPLNE1_3182
if
01AF:   car $8459 0 $8437 $8438 $8439 radius $8408 $8408 $8408
jf @RCPLNE1_3182
$8469 += 1 // integer values
0084: $8472 = $8469 // integer values and handles
gosub @RCPLNE1_4129
0086: $8437 = $8446 // floating-point values only
0086: $8438 = $8447 // floating-point values only
0086: $8439 = $8448 // floating-point values only
if
003A:   $8469 == $8481 // integer values and handles
jf @RCPLNE1_3166
00BC: text_highpriority 'RACEFA' 5000 ms 1  // ~r~You failed to win the race!
jump @RCPLNE1_6348

:RCPLNE1_3166
04D2: set_plane $8459 fly_autopilot_around_point $8437 $8438 $8439 36

:RCPLNE1_3182
if
   not Car.Wrecked($8460)
jf @RCPLNE1_3440
0084: $8463 = $8460 // integer values and handles
0084: $8472 = $8470 // integer values and handles
0086: $8428 = $8422 // floating-point values only
0086: $8429 = $8423 // floating-point values only
0086: $8430 = $8424 // floating-point values only
0084: $8479 = $8476 // integer values and handles
gosub @RCPLNE1_6045
0086: $8422 = $8428 // floating-point values only
0086: $8423 = $8429 // floating-point values only
0086: $8424 = $8430 // floating-point values only
0084: $8476 = $8479 // integer values and handles
if
   not Car.Wrecked($8460)
jf @RCPLNE1_3440
if
01AF:   car $8460 0 $8440 $8441 $8442 radius $8409 $8409 $8409
jf @RCPLNE1_3440
$8470 += 1 // integer values
0084: $8472 = $8470 // integer values and handles
gosub @RCPLNE1_4129
0086: $8440 = $8446 // floating-point values only
0086: $8441 = $8447 // floating-point values only
0086: $8442 = $8448 // floating-point values only
if
003A:   $8470 == $8481 // integer values and handles
jf @RCPLNE1_3424
00BC: text_highpriority 'RACEFA' 5000 ms 1  // ~r~You failed to win the race!
jump @RCPLNE1_6348

:RCPLNE1_3424
04D2: set_plane $8460 fly_autopilot_around_point $8440 $8441 $8442 27

:RCPLNE1_3440
if
   not Car.Wrecked($8461)
jf @RCPLNE1_3698
0084: $8463 = $8461 // integer values and handles
0084: $8472 = $8471 // integer values and handles
0086: $8428 = $8425 // floating-point values only
0086: $8429 = $8426 // floating-point values only
0086: $8430 = $8427 // floating-point values only
0084: $8479 = $8477 // integer values and handles
gosub @RCPLNE1_6045
0086: $8425 = $8428 // floating-point values only
0086: $8426 = $8429 // floating-point values only
0086: $8427 = $8430 // floating-point values only
0084: $8477 = $8479 // integer values and handles
if
   not Car.Wrecked($8461)
jf @RCPLNE1_3698
if
01AF:   car $8461 0 $8443 $8444 $8445 radius $8410 $8410 $8410
jf @RCPLNE1_3698
$8471 += 1 // integer values
0084: $8472 = $8471 // integer values and handles
gosub @RCPLNE1_4129
0086: $8443 = $8446 // floating-point values only
0086: $8444 = $8447 // floating-point values only
0086: $8445 = $8448 // floating-point values only
if
003A:   $8471 == $8481 // integer values and handles
jf @RCPLNE1_3682
00BC: text_highpriority 'RACEFA' 5000 ms 1  // ~r~You failed to win the race!
jump @RCPLNE1_6348

:RCPLNE1_3682
04D2: set_plane $8461 fly_autopilot_around_point $8443 $8444 $8445 42

:RCPLNE1_3698
if
  $8473 == 0 // integer values
jf @RCPLNE1_3730
00BC: text_highpriority 'FIRST' 100 ms 1  // ~b~1st

:RCPLNE1_3730
if
  $8473 == 1 // integer values
jf @RCPLNE1_3762
00BC: text_highpriority 'SECOND' 100 ms 1  // ~b~2nd

:RCPLNE1_3762
if
  $8473 == 2 // integer values
jf @RCPLNE1_3794
00BC: text_highpriority 'THIRD' 100 ms 1  // ~b~3rd

:RCPLNE1_3794
if
  $8473 == 3 // integer values
jf @RCPLNE1_3826
00BC: text_highpriority 'FOURTH' 100 ms 1  // ~b~4th

:RCPLNE1_3826
if
003A:   $8468 == $8482 // integer values and handles
jf @RCPLNE1_3878
04D5: create_corona_at $8431 $8432 $8433 radius 7.0 type 6 flare 0 RGB 100 0 100
jump @RCPLNE1_3907

:RCPLNE1_3878
04D5: create_corona_at $8431 $8432 $8433 radius 7.0 type 6 flare 0 RGB 255 137 205

:RCPLNE1_3907
if
   Car.Wrecked($8464)
jf @RCPLNE1_3930
jump @RCPLNE1_6348

:RCPLNE1_3930
if
   not Car.Wrecked($8464)
jf @RCPLNE1_4037
if
80B0:   not car $8464 0 833.0 1340.0 -225.0 -1666.0
jf @RCPLNE1_4037
if
00B0:   car $8464 0 940.212 1340.225 -253.15 -1700.0
jf @RCPLNE1_4037
00BC: text_highpriority 'RCPL1_8' 3000 ms 1  // ~g~Your RC Plane is going out of range!

:RCPLNE1_4037
if
   not Car.Wrecked($8464)
jf @RCPLNE1_4115
if
80B0:   not car $8464 0 940.212 1340.225 -253.15 -1700.0
jf @RCPLNE1_4115
0409: blow_up_rc_buggy
00BC: text_highpriority 'RCPL1_9' 5000 ms 1  // ~r~Your RC Plane went out of range!
jump @RCPLNE1_6348

:RCPLNE1_4115
jump @RCPLNE1_2622

:RCPLNE1_4122
jump @RCPLNE1_6373

:RCPLNE1_4129
if
  $8472 == 0 // integer values
jf @RCPLNE1_4195
0086: $8446 = $8489 // floating-point values only
0086: $8447 = $8490 // floating-point values only
0086: $8448 = $8491 // floating-point values only
0086: $8449 = $8492 // floating-point values only
0086: $8450 = $8493 // floating-point values only
0086: $8451 = $8494 // floating-point values only

:RCPLNE1_4195
if
  $8472 == 1 // integer values
jf @RCPLNE1_4261
0086: $8446 = $8492 // floating-point values only
0086: $8447 = $8493 // floating-point values only
0086: $8448 = $8494 // floating-point values only
0086: $8449 = $8495 // floating-point values only
0086: $8450 = $8496 // floating-point values only
0086: $8451 = $8497 // floating-point values only

:RCPLNE1_4261
if
  $8472 == 2 // integer values
jf @RCPLNE1_4327
0086: $8446 = $8495 // floating-point values only
0086: $8447 = $8496 // floating-point values only
0086: $8448 = $8497 // floating-point values only
0086: $8449 = $8498 // floating-point values only
0086: $8450 = $8499 // floating-point values only
0086: $8451 = $8500 // floating-point values only

:RCPLNE1_4327
if
  $8472 == 3 // integer values
jf @RCPLNE1_4393
0086: $8446 = $8498 // floating-point values only
0086: $8447 = $8499 // floating-point values only
0086: $8448 = $8500 // floating-point values only
0086: $8449 = $8501 // floating-point values only
0086: $8450 = $8502 // floating-point values only
0086: $8451 = $8503 // floating-point values only

:RCPLNE1_4393
if
  $8472 == 4 // integer values
jf @RCPLNE1_4459
0086: $8446 = $8501 // floating-point values only
0086: $8447 = $8502 // floating-point values only
0086: $8448 = $8503 // floating-point values only
0086: $8449 = $8504 // floating-point values only
0086: $8450 = $8505 // floating-point values only
0086: $8451 = $8506 // floating-point values only

:RCPLNE1_4459
if
  $8472 == 5 // integer values
jf @RCPLNE1_4525
0086: $8446 = $8504 // floating-point values only
0086: $8447 = $8505 // floating-point values only
0086: $8448 = $8506 // floating-point values only
0086: $8449 = $8507 // floating-point values only
0086: $8450 = $8508 // floating-point values only
0086: $8451 = $8509 // floating-point values only

:RCPLNE1_4525
if
  $8472 == 6 // integer values
jf @RCPLNE1_4591
0086: $8446 = $8507 // floating-point values only
0086: $8447 = $8508 // floating-point values only
0086: $8448 = $8509 // floating-point values only
0086: $8449 = $8510 // floating-point values only
0086: $8450 = $8511 // floating-point values only
0086: $8451 = $8512 // floating-point values only

:RCPLNE1_4591
if
  $8472 == 7 // integer values
jf @RCPLNE1_4657
0086: $8446 = $8510 // floating-point values only
0086: $8447 = $8511 // floating-point values only
0086: $8448 = $8512 // floating-point values only
0086: $8449 = $8513 // floating-point values only
0086: $8450 = $8514 // floating-point values only
0086: $8451 = $8515 // floating-point values only

:RCPLNE1_4657
if
  $8472 == 8 // integer values
jf @RCPLNE1_4723
0086: $8446 = $8513 // floating-point values only
0086: $8447 = $8514 // floating-point values only
0086: $8448 = $8515 // floating-point values only
0086: $8449 = $8516 // floating-point values only
0086: $8450 = $8517 // floating-point values only
0086: $8451 = $8518 // floating-point values only

:RCPLNE1_4723
if
  $8472 == 9 // integer values
jf @RCPLNE1_4789
0086: $8446 = $8516 // floating-point values only
0086: $8447 = $8517 // floating-point values only
0086: $8448 = $8518 // floating-point values only
0086: $8449 = $8519 // floating-point values only
0086: $8450 = $8520 // floating-point values only
0086: $8451 = $8521 // floating-point values only

:RCPLNE1_4789
if
  $8472 == 10 // integer values
jf @RCPLNE1_4855
0086: $8446 = $8519 // floating-point values only
0086: $8447 = $8520 // floating-point values only
0086: $8448 = $8521 // floating-point values only
0086: $8449 = $8522 // floating-point values only
0086: $8450 = $8523 // floating-point values only
0086: $8451 = $8524 // floating-point values only

:RCPLNE1_4855
if
  $8472 == 11 // integer values
jf @RCPLNE1_4921
0086: $8446 = $8522 // floating-point values only
0086: $8447 = $8523 // floating-point values only
0086: $8448 = $8524 // floating-point values only
0086: $8449 = $8525 // floating-point values only
0086: $8450 = $8526 // floating-point values only
0086: $8451 = $8527 // floating-point values only

:RCPLNE1_4921
if
  $8472 == 12 // integer values
jf @RCPLNE1_4987
0086: $8446 = $8525 // floating-point values only
0086: $8447 = $8526 // floating-point values only
0086: $8448 = $8527 // floating-point values only
0086: $8449 = $8528 // floating-point values only
0086: $8450 = $8529 // floating-point values only
0086: $8451 = $8530 // floating-point values only

:RCPLNE1_4987
if
  $8472 == 13 // integer values
jf @RCPLNE1_5053
0086: $8446 = $8528 // floating-point values only
0086: $8447 = $8529 // floating-point values only
0086: $8448 = $8530 // floating-point values only
0086: $8449 = $8531 // floating-point values only
0086: $8450 = $8532 // floating-point values only
0086: $8451 = $8533 // floating-point values only

:RCPLNE1_5053
if
  $8472 == 14 // integer values
jf @RCPLNE1_5119
0086: $8446 = $8531 // floating-point values only
0086: $8447 = $8532 // floating-point values only
0086: $8448 = $8533 // floating-point values only
0086: $8449 = $8534 // floating-point values only
0086: $8450 = $8535 // floating-point values only
0086: $8451 = $8536 // floating-point values only

:RCPLNE1_5119
if
  $8472 == 15 // integer values
jf @RCPLNE1_5185
0086: $8446 = $8534 // floating-point values only
0086: $8447 = $8535 // floating-point values only
0086: $8448 = $8536 // floating-point values only
0086: $8449 = $8537 // floating-point values only
0086: $8450 = $8538 // floating-point values only
0086: $8451 = $8539 // floating-point values only

:RCPLNE1_5185
if
  $8472 == 16 // integer values
jf @RCPLNE1_5251
0086: $8446 = $8537 // floating-point values only
0086: $8447 = $8538 // floating-point values only
0086: $8448 = $8539 // floating-point values only
0086: $8449 = $8540 // floating-point values only
0086: $8450 = $8541 // floating-point values only
0086: $8451 = $8542 // floating-point values only

:RCPLNE1_5251
if
  $8472 == 17 // integer values
jf @RCPLNE1_5317
0086: $8446 = $8540 // floating-point values only
0086: $8447 = $8541 // floating-point values only
0086: $8448 = $8542 // floating-point values only
0086: $8449 = $8543 // floating-point values only
0086: $8450 = $8544 // floating-point values only
0086: $8451 = $8545 // floating-point values only

:RCPLNE1_5317
if
  $8472 == 18 // integer values
jf @RCPLNE1_5383
0086: $8446 = $8543 // floating-point values only
0086: $8447 = $8544 // floating-point values only
0086: $8448 = $8545 // floating-point values only
0086: $8449 = $8546 // floating-point values only
0086: $8450 = $8547 // floating-point values only
0086: $8451 = $8548 // floating-point values only

:RCPLNE1_5383
if
  $8472 == 19 // integer values
jf @RCPLNE1_5449
0086: $8446 = $8546 // floating-point values only
0086: $8447 = $8547 // floating-point values only
0086: $8448 = $8548 // floating-point values only
0086: $8449 = $8549 // floating-point values only
0086: $8450 = $8550 // floating-point values only
0086: $8451 = $8551 // floating-point values only

:RCPLNE1_5449
if
  $8472 == 20 // integer values
jf @RCPLNE1_5515
0086: $8446 = $8549 // floating-point values only
0086: $8447 = $8550 // floating-point values only
0086: $8448 = $8551 // floating-point values only
0086: $8449 = $8552 // floating-point values only
0086: $8450 = $8553 // floating-point values only
0086: $8451 = $8554 // floating-point values only

:RCPLNE1_5515
if
  $8472 == 21 // integer values
jf @RCPLNE1_5581
0086: $8446 = $8552 // floating-point values only
0086: $8447 = $8553 // floating-point values only
0086: $8448 = $8554 // floating-point values only
0086: $8449 = $8555 // floating-point values only
0086: $8450 = $8556 // floating-point values only
0086: $8451 = $8557 // floating-point values only

:RCPLNE1_5581
if
  $8472 == 22 // integer values
jf @RCPLNE1_5647
0086: $8446 = $8555 // floating-point values only
0086: $8447 = $8556 // floating-point values only
0086: $8448 = $8557 // floating-point values only
0086: $8449 = $8558 // floating-point values only
0086: $8450 = $8559 // floating-point values only
0086: $8451 = $8560 // floating-point values only

:RCPLNE1_5647
if
  $8472 == 23 // integer values
jf @RCPLNE1_5713
0086: $8446 = $8558 // floating-point values only
0086: $8447 = $8559 // floating-point values only
0086: $8448 = $8560 // floating-point values only
0086: $8449 = $8561 // floating-point values only
0086: $8450 = $8562 // floating-point values only
0086: $8451 = $8563 // floating-point values only

:RCPLNE1_5713
if
  $8472 == 24 // integer values
jf @RCPLNE1_5779
0086: $8446 = $8561 // floating-point values only
0086: $8447 = $8562 // floating-point values only
0086: $8448 = $8563 // floating-point values only
0086: $8449 = $8564 // floating-point values only
0086: $8450 = $8565 // floating-point values only
0086: $8451 = $8566 // floating-point values only

:RCPLNE1_5779
if
  $8472 == 25 // integer values
jf @RCPLNE1_5845
0086: $8446 = $8564 // floating-point values only
0086: $8447 = $8565 // floating-point values only
0086: $8448 = $8566 // floating-point values only
0086: $8449 = $8567 // floating-point values only
0086: $8450 = $8568 // floating-point values only
0086: $8451 = $8569 // floating-point values only

:RCPLNE1_5845
if
  $8472 == 26 // integer values
jf @RCPLNE1_5911
0086: $8446 = $8567 // floating-point values only
0086: $8447 = $8568 // floating-point values only
0086: $8448 = $8569 // floating-point values only
0086: $8449 = $8570 // floating-point values only
0086: $8450 = $8571 // floating-point values only
0086: $8451 = $8572 // floating-point values only

:RCPLNE1_5911
if
  $8472 == 27 // integer values
jf @RCPLNE1_5977
0086: $8446 = $8570 // floating-point values only
0086: $8447 = $8571 // floating-point values only
0086: $8448 = $8572 // floating-point values only
0086: $8449 = $8573 // floating-point values only
0086: $8450 = $8574 // floating-point values only
0086: $8451 = $8575 // floating-point values only

:RCPLNE1_5977
if
  $8472 == 28 // integer values
jf @RCPLNE1_6043
0086: $8446 = $8573 // floating-point values only
0086: $8447 = $8574 // floating-point values only
0086: $8448 = $8575 // floating-point values only
0086: $8449 = $8573 // floating-point values only
0086: $8450 = $8574 // floating-point values only
0086: $8451 = $8575 // floating-point values only

:RCPLNE1_6043
return

:RCPLNE1_6045
$8462 = Car.Health($8463)
if
  500 > $8462 // integer values
jf @RCPLNE1_6080
Car.Health($8463) = 1000

:RCPLNE1_6080
if
   not Car.Wrecked($8464)
jf @RCPLNE1_6346
if
003A:   $8468 == $8472 // integer values and handles
jf @RCPLNE1_6320
Car.StorePos($8463, $8401, $8402, $8403)
0086: $8405 = $8401 // floating-point values only
0061: $8405 -= $8431 // floating-point values
0086: $8406 = $8402 // floating-point values only
0061: $8406 -= $8432 // floating-point values
0069: $8405 *= $8405 // floating-point values
0069: $8406 *= $8406 // floating-point values
0086: $8407 = $8405 // floating-point values only
0059: $8407 += $8406 // floating-point values
01FB: $8411 = square_root $8407
Car.StorePos($8464, $8401, $8402, $8403)
0086: $8405 = $8401 // floating-point values only
0061: $8405 -= $8431 // floating-point values
0086: $8406 = $8402 // floating-point values only
0061: $8406 -= $8432 // floating-point values
0069: $8405 *= $8405 // floating-point values
0069: $8406 *= $8406 // floating-point values
0086: $8407 = $8405 // floating-point values only
0059: $8407 += $8406 // floating-point values
01FB: $8412 = square_root $8407
if
0024:   $8412 > $8411 // floating-point values only
jf @RCPLNE1_6313
$8473 += 1 // integer values

:RCPLNE1_6313
jump @RCPLNE1_6346

:RCPLNE1_6320
if
001C:   $8472 > $8468 // integer values
jf @RCPLNE1_6346
$8473 += 1 // integer values

:RCPLNE1_6346
return

:RCPLNE1_6348
00BA: text_styled 'M_FAIL' 5000 ms 1  // MISSION FAILED!
Player.WantedLevel($PLAYER_CHAR) = $8576
return

:RCPLNE1_6373
0084: $8577 = $8474 // integer values and handles
$8577 /= 1000 // integer values
042E: downdate_integer_stat 3 to $8577
0084: $8579 = $8577 // integer values and handles
$8579 /= 60 // integer values
0084: $8578 = $8579 // integer values and handles
$8578 *= 60 // integer values
0060: $8577 -= $8578 // integer values
if
  $8577 >= 10 // integer values
jf @RCPLNE1_6480
02FD: text_2numbers_lowpriority 'RCH1_9' $8579 $8577 7000 flag 1  // ~b~TOTAL TIME: ~1~:~1~
jump @RCPLNE1_6501

:RCPLNE1_6480
02FD: text_2numbers_lowpriority 'RCH1_10' $8579 $8577 7000 flag 1  // ~b~TOTAL TIME: ~1~:0~1~

:RCPLNE1_6501
01E3: text_1number_styled 'M_PASS' number 100 time 5000 style 1  // MISSION PASSED! $~1~
Player.ClearWantedLevel($PLAYER_CHAR)
Player.Money($PLAYER_CHAR) += 100
if
  $8485 == 0 // integer values
jf @RCPLNE1_6561
030C: progress_made += 1
0595: mission_complete
$8485 = 1 // integer values

:RCPLNE1_6561
0394: play_music 1
return

:RCPLNE1_6567
$ONMISSION = 0 // integer values
$1084 = 0 // integer values
014F: stop_timer $8474
Marker.Disable($8453)
Marker.Disable($8454)
Marker.Disable($8455)
Marker.Disable($8456)
Marker.Disable($8457)
04DB: exit_rc_mode
if
   not Car.Wrecked($8458)
jf @RCPLNE1_6636
020A: set_car $8458 door_status_to 1

:RCPLNE1_6636
Car.RemoveReferences($8458)
Model.Destroy(#RCBARON)
Car.RemoveReferences($8459)
Car.RemoveReferences($8460)
Car.RemoveReferences($8461)
Car.Destroy($8459)
Car.Destroy($8460)
Car.Destroy($8461)
042E: downdate_integer_stat 3 to $8474
01F7: set_player $PLAYER_CHAR ignored_by_cops_state_to 0
$400 = 1 // integer values
01BD: $CURRENT_TIME_IN_MS = current_time_in_ms
mission_cleanup
return
